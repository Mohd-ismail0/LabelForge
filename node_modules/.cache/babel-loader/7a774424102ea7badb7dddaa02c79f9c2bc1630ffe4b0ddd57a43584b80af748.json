{"ast":null,"code":"import JsBarcode from 'jsbarcode';\n\n// Shared label rendering utilities to ensure consistency between design and generation\n\nexport const LABEL_SIZES = {\n  '2x1': {\n    width: 2,\n    height: 1,\n    dpi: 300\n  },\n  '3x1': {\n    width: 3,\n    height: 1,\n    dpi: 300\n  },\n  '2.5x1': {\n    width: 2.5,\n    height: 1,\n    dpi: 300\n  },\n  '4x2': {\n    width: 4,\n    height: 2,\n    dpi: 300\n  },\n  'custom': {\n    width: 2,\n    height: 1,\n    dpi: 300\n  }\n};\nexport const renderBarcode = (barcode, barcodeType, width, height, showText = true) => {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  // Set canvas size\n  canvas.width = width;\n  canvas.height = height;\n\n  // Fill background\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n  try {\n    // Generate barcode\n    const barcodeCanvas = document.createElement('canvas');\n    JsBarcode(barcodeCanvas, barcode, {\n      format: barcodeType,\n      width: 2,\n      height: height * 0.6,\n      displayValue: showText,\n      fontSize: Math.max(8, height * 0.15),\n      margin: 5\n    });\n\n    // Draw barcode centered\n    const barcodeX = (width - barcodeCanvas.width) / 2;\n    const barcodeY = (height - barcodeCanvas.height) / 2;\n    ctx.drawImage(barcodeCanvas, barcodeX, barcodeY);\n    return canvas;\n  } catch (error) {\n    console.error('Error generating barcode:', error);\n    // Draw error text\n    ctx.fillStyle = 'red';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Invalid Barcode', width / 2, height / 2);\n    return canvas;\n  }\n};\nexport const renderText = (text, style, width, height) => {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  // Set canvas size\n  canvas.width = width;\n  canvas.height = height;\n\n  // Fill background\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n\n  // Set text properties\n  ctx.fillStyle = style.color || '#000000';\n  ctx.font = `${style.fontWeight || 'normal'} ${style.fontSize || 12}px Arial`;\n  ctx.textAlign = style.textAlign || 'left';\n  ctx.textBaseline = 'middle';\n\n  // Calculate text position\n  let x, y;\n  switch (style.textAlign) {\n    case 'center':\n      x = width / 2;\n      break;\n    case 'right':\n      x = width - 5;\n      break;\n    default:\n      x = 5;\n  }\n  y = height / 2;\n\n  // Draw text\n  ctx.fillText(text, x, y);\n  return canvas;\n};\nexport const renderLabel = (labelData, labelSettings, elements) => {\n  const currentSize = LABEL_SIZES[labelSettings.size] || LABEL_SIZES['2x1'];\n  const dpi = currentSize.dpi;\n  const width = currentSize.width * dpi;\n  const height = currentSize.height * dpi;\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  // Set canvas size\n  canvas.width = width;\n  canvas.height = height;\n\n  // Fill background\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n\n  // Render each element\n  elements.forEach(element => {\n    if (element.type === 'barcode') {\n      const elementCanvas = renderBarcode(labelData.barcode, labelSettings.barcodeType, element.size.width * (dpi / 96),\n      // Convert from display pixels to print pixels\n      element.size.height * (dpi / 96));\n      const x = element.position.x * (dpi / 96);\n      const y = element.position.y * (dpi / 96);\n      ctx.drawImage(elementCanvas, x, y);\n    } else if (element.type === 'text') {\n      // Replace placeholder text with actual data\n      let textContent = element.content;\n      if (labelData.text && textContent.includes('Sample')) {\n        textContent = labelData.text;\n      }\n      const elementCanvas = renderText(textContent, element.style, element.size.width * (dpi / 96), element.size.height * (dpi / 96));\n      const x = element.position.x * (dpi / 96);\n      const y = element.position.y * (dpi / 96);\n      ctx.drawImage(elementCanvas, x, y);\n    }\n  });\n  return canvas;\n};","map":{"version":3,"names":["JsBarcode","LABEL_SIZES","width","height","dpi","renderBarcode","barcode","barcodeType","showText","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","barcodeCanvas","format","displayValue","fontSize","Math","max","margin","barcodeX","barcodeY","drawImage","error","console","font","textAlign","fillText","renderText","text","style","color","fontWeight","textBaseline","x","y","renderLabel","labelData","labelSettings","elements","currentSize","size","forEach","element","type","elementCanvas","position","textContent","content","includes"],"sources":["/workspace/src/utils/labelRenderer.js"],"sourcesContent":["import JsBarcode from 'jsbarcode';\n\n// Shared label rendering utilities to ensure consistency between design and generation\n\nexport const LABEL_SIZES = {\n  '2x1': { width: 2, height: 1, dpi: 300 },\n  '3x1': { width: 3, height: 1, dpi: 300 },\n  '2.5x1': { width: 2.5, height: 1, dpi: 300 },\n  '4x2': { width: 4, height: 2, dpi: 300 },\n  'custom': { width: 2, height: 1, dpi: 300 }\n};\n\nexport const renderBarcode = (barcode, barcodeType, width, height, showText = true) => {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  \n  // Set canvas size\n  canvas.width = width;\n  canvas.height = height;\n  \n  // Fill background\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n  \n  try {\n    // Generate barcode\n    const barcodeCanvas = document.createElement('canvas');\n    JsBarcode(barcodeCanvas, barcode, {\n      format: barcodeType,\n      width: 2,\n      height: height * 0.6,\n      displayValue: showText,\n      fontSize: Math.max(8, height * 0.15),\n      margin: 5\n    });\n    \n    // Draw barcode centered\n    const barcodeX = (width - barcodeCanvas.width) / 2;\n    const barcodeY = (height - barcodeCanvas.height) / 2;\n    ctx.drawImage(barcodeCanvas, barcodeX, barcodeY);\n    \n    return canvas;\n  } catch (error) {\n    console.error('Error generating barcode:', error);\n    // Draw error text\n    ctx.fillStyle = 'red';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.fillText('Invalid Barcode', width / 2, height / 2);\n    return canvas;\n  }\n};\n\nexport const renderText = (text, style, width, height) => {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  \n  // Set canvas size\n  canvas.width = width;\n  canvas.height = height;\n  \n  // Fill background\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n  \n  // Set text properties\n  ctx.fillStyle = style.color || '#000000';\n  ctx.font = `${style.fontWeight || 'normal'} ${style.fontSize || 12}px Arial`;\n  ctx.textAlign = style.textAlign || 'left';\n  ctx.textBaseline = 'middle';\n  \n  // Calculate text position\n  let x, y;\n  switch (style.textAlign) {\n    case 'center':\n      x = width / 2;\n      break;\n    case 'right':\n      x = width - 5;\n      break;\n    default:\n      x = 5;\n  }\n  y = height / 2;\n  \n  // Draw text\n  ctx.fillText(text, x, y);\n  \n  return canvas;\n};\n\nexport const renderLabel = (labelData, labelSettings, elements) => {\n  const currentSize = LABEL_SIZES[labelSettings.size] || LABEL_SIZES['2x1'];\n  const dpi = currentSize.dpi;\n  const width = currentSize.width * dpi;\n  const height = currentSize.height * dpi;\n  \n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  \n  // Set canvas size\n  canvas.width = width;\n  canvas.height = height;\n  \n  // Fill background\n  ctx.fillStyle = 'white';\n  ctx.fillRect(0, 0, width, height);\n  \n  // Render each element\n  elements.forEach(element => {\n    if (element.type === 'barcode') {\n      const elementCanvas = renderBarcode(\n        labelData.barcode,\n        labelSettings.barcodeType,\n        element.size.width * (dpi / 96), // Convert from display pixels to print pixels\n        element.size.height * (dpi / 96)\n      );\n      \n      const x = element.position.x * (dpi / 96);\n      const y = element.position.y * (dpi / 96);\n      ctx.drawImage(elementCanvas, x, y);\n    } else if (element.type === 'text') {\n      // Replace placeholder text with actual data\n      let textContent = element.content;\n      if (labelData.text && textContent.includes('Sample')) {\n        textContent = labelData.text;\n      }\n      \n      const elementCanvas = renderText(\n        textContent,\n        element.style,\n        element.size.width * (dpi / 96),\n        element.size.height * (dpi / 96)\n      );\n      \n      const x = element.position.x * (dpi / 96);\n      const y = element.position.y * (dpi / 96);\n      ctx.drawImage(elementCanvas, x, y);\n    }\n  });\n  \n  return canvas;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}